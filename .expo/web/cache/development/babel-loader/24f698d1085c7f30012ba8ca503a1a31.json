{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport * as Location from \"expo-location\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar API_KEY = \"f70a0961daee4a52ea707c0000e6be44\";\nfetchDataFromApi(\"31.43301\", \"-100.49091\");\nexport default function App() {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== \"granted\")) {\n                _context.next = 7;\n                break;\n              }\n\n              fetchDataFromApi(\"31.43301\", \"-100.49091\");\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              fetchDataFromApi(location.coords.latitude, location.coords.longitude);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var fetchDataFromApi = function fetchDataFromApi(latitude, longitude) {\n    if (latitude && longitude) {\n      fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + latitude + \"&lon=\" + longitude + \"&exclude=hourly,minutely&units=metric&appid=\" + API_KEY).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        setData(data);\n      });\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(CurrentWeather, {\n      current: data.current\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/wngar/Documents/Projects/TinyStationV1/TinyStationV1/App.js"],"names":["StatusBar","React","useEffect","useState","CurrentWeather","Location","API_KEY","fetchDataFromApi","App","data","setData","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","location","coords","latitude","longitude","fetch","then","res","json","styles","container","current","StyleSheet","create","display","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,OAAOC,cAAP;AACA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;;;AACA,IAAMC,OAAO,GAAG,kCAAhB;AACAC,gBAAgB,CAAC,UAAD,EAAa,YAAb,CAAhB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAwBL,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBG,QAAQ,CAACM,iCAAT,EADxB;;AAAA;AAAA;AACOC,cAAAA,MADP,yBACOA,MADP;;AAAA,oBAEKA,MAAM,KAAK,SAFhB;AAAA;AAAA;AAAA;;AAGGL,cAAAA,gBAAgB,CAAC,UAAD,EAAa,YAAb,CAAhB;AAHH;;AAAA;AAAA;AAAA,+CAOsBF,QAAQ,CAACQ,uBAAT,CAAiC,EAAjC,CAPtB;;AAAA;AAOKC,cAAAA,QAPL;AAQCP,cAAAA,gBAAgB,CAACO,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,EAA2BF,QAAQ,CAACC,MAAT,CAAgBE,SAA3C,CAAhB;;AARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAUD,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAMV,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACS,QAAD,EAAWC,SAAX,EAAyB;AAChD,QAAID,QAAQ,IAAIC,SAAhB,EAA2B;AACzBC,MAAAA,KAAK,0DACoDF,QADpD,aACoEC,SADpE,oDAC4HX,OAD5H,CAAL,CAGGa,IAHH,CAGQ,UAACC,GAAD;AAAA,eAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,OAHR,EAIGF,IAJH,CAIQ,UAACV,IAAD,EAAU;AAEdC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAPH;AAQD;AACF,GAXD;;AAYA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEa,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,cAAD;AAAgB,MAAA,OAAO,EAAEd,IAAI,CAACe;AAA9B,MADF,EAEE,KAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB,MAFF;AAAA,IADF;AAMD;AAED,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,eAAe,EAAE,MAHR;AAITC,IAAAA,UAAU,EAAE,QAJH;AAKTC,IAAAA,cAAc,EAAE;AALP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport * as Location from \"expo-location\";\nconst API_KEY = \"f70a0961daee4a52ea707c0000e6be44\";\nfetchDataFromApi(\"31.43301\", \"-100.49091\");\n\nexport default function App() {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    (async () => {\n      let { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== \"granted\") {\n        fetchDataFromApi(\"31.43301\", \"-100.49091\");\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      fetchDataFromApi(location.coords.latitude, location.coords.longitude);\n    })();\n  }, []);\n\n  const fetchDataFromApi = (latitude, longitude) => {\n    if (latitude && longitude) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&units=metric&appid=${API_KEY}`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          // console.log(data)\n          setData(data);\n        });\n    }\n  };\n  return (\n    <View style={styles.container}>\n      <CurrentWeather current={data.current} />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}